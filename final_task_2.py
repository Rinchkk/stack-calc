'''
ID успешной посылки 58442947

--ПРИНЦИП РАБОТЫ--
Я решила эту задачу следующим образом: добавляла числа в стек до тех пор, пока не встречала знак
какой-либо арифметической операции. Тогда я извлекала 2 элемента из верхушки стека, проводила
арифметическую операцию и добавляла результат в стек. Когда арифметические действия закончились,
в стеке остался 1 элемент - это и есть результат всего выражения, записанного с помощью
обратной польской нотации

--ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ--
Поскольку гарантируется, что на вход подается корректная обратная польская запись, то количество
арифметических операций на 1 меньше, нежели количество подаваемых на вход чисел. Так как арифметическая
операция применяется для последних двух чисел, которые были перед ней записаны, а стек работает по
принципу LIFO, то как раз верхние 2 элемента из стека и нужно извлекать и проводить с ними операцию.
Благодаря корректности условия задачи в конце останется 1 элемент - нужный нам результат выражения

--ВРЕМЕННАЯ СЛОЖНОСТЬ--
Добавление и извлечение элемента из стека стоит О(1). Поскольку я записываю каждый элемент в массив строк,
прежде чем добавлять числа в стек, то временная сложность алгоритма будет пропорциональна
количеству элементов в этом массиве - О(n), где n - длина массива

--ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ--
В данной программе создано 2 массива:
1й массив строк, в котором записаны все элементы из считываемой строки в задаче
2й массив - стек, в котором количество элементов максимум равняется длине (1го массива + 1) : 2
Значит, если количество элементов в 1м массиве обозначить за n, то пространственная сложность
программы составит О((3n + 1) : 2)
'''

class Stack:
    def __init__(self):
        self.items = []
        self.size = 0

    def is_empty(self):
        return self.size == 0

    def push(self, item):
        self.items.append(item)

    def pop(self):
        try:
            assert self.is_empty()
            return self.items.pop()
        except AssertionError:
            print("Error: stack is empty")

    def peek(self):
        try:
            assert self.is_empty()
            return self.items[-1]
        except AssertionError:
            print("Error: stack is empty")

def main():
    arr = list(map(str, input().split())) #Я не смогла нагуглить как считать в питоне элементы, записанные в одной строке, но имеющие разный тип данных
    stack = Stack()
    CONST_STR = "+-*/"
    CONST_S1 = '+'
    CONST_S2 = '-'
    CONST_S3 = '*'
    for item in arr:
        if CONST_STR.find(item) == -1:
            stack.push(int(item))
        else:
            val1 = int(stack.pop())
            val2 = int(stack.pop())
            if item == CONST_S1:
                stack.push(val2 + val1)
            elif item == CONST_S2:
                stack.push(val2 - val1)
            elif item == CONST_S3:
                stack.push(val2 * val1)
            else:
                stack.push(val2 // val1)

    print(stack.peek())

if __name__ == '__main__':
    main()